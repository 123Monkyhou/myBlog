import{_ as c,D as s,c as p,a as t,j as e,I as a,a1 as o,o as r}from"./chunks/framework.D13AgEzC.js";const P=JSON.parse('{"title":"嵌套路由：","description":"","frontmatter":{},"headers":[],"relativePath":"notes/react/基础配置.md","filePath":"notes/react/基础配置.md"}'),d={name:"notes/react/基础配置.md"},u=o(`<p>react是mvc模式,vue是mvvm mvc: @1 需要构建试图,通过jsx @2 构建数据层:但凡在视图中需要动态处理的都需要有对应的数据模型 @3 控制层:当在视图中进行某些操作时,都是去修改相关的数据,react按照最新的数据去渲染 &quot;数据驱动试图的渲染&quot; 视图中的表单改变,需要开发者自己去写代码实现修改数据 mvvm: 不仅监听数据的改变,也能监听到视图的改变 &quot;双向驱动&quot;</p><h3 id="构架视图" tabindex="-1">构架视图 <a class="header-anchor" href="#构架视图" aria-label="Permalink to &quot;构架视图&quot;">​</a></h3><pre><code>jsx:javascript and xml  把js和html混合在一起 [不是字符串]
import React from &#39;react&#39;; //react语法核心
import ReactDOM from &#39;react-dom/client&#39;; // 构建html的核心
</code></pre><p>react提供了react.fragment标签&lt;&gt;&lt;/&gt; 以减少文件结构</p><p>给元素设置样式: 1. 使用行内样式: 必须使用{}样式 <code> &lt;div style=&quot;color: red; font-size: 18px;&quot;&gt;test&lt;/div&gt; </code></p><pre><code>2. className
  \`\`\`
     &lt;div className=&#39;testText&#39;&gt;x&lt;/div&gt;
  \`\`\`
</code></pre><p>使用循环: 1.普通循环</p><ul> {data.map((item,index)=&gt;{ return <li> {item.text} </li> })} </ul>`,8),_=e("ul",null,[t(" {new Array(5).fill(null).map((_,index)=>{ return "),e("li",null,"{index+1}"),t(" })} ")],-1),m=o(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;Link to=&quot;/xxx&quot;&gt;xxx&lt;/Link&gt;</span></span></code></pre></div><p>编程式：useNavigate</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const navigate = useNavigate()</span></span>
<span class="line"><span>&lt;button onClick={navigate(&quot;/xxx&quot;)}&gt;&lt;/button&gt;</span></span></code></pre></div><p>传参 1.拼接</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>navigate(&quot;/xxx?id=100&quot;)</span></span>
<span class="line"><span>const [params] = useSearchParams()</span></span>
<span class="line"><span>let id = param.get(&quot;id&quot;)</span></span></code></pre></div>`,5),h={start:"2"},x=e("h1",{id:"嵌套路由",tabindex:"-1"},[t("嵌套路由： "),e("a",{class:"header-anchor",href:"#嵌套路由","aria-label":'Permalink to "嵌套路由："'},"​")],-1),g=e("h1",{id:"_404",tabindex:"-1"},[t("404 "),e("a",{class:"header-anchor",href:"#_404","aria-label":'Permalink to "404"'},"​")],-1);function v(b,k,f,q,T,N){const n=s("xxx"),i=s("Ooutlet"),l=s("NotFount");return r(),p("div",null,[u,t(" 2.没有数据循环 "),_,t(" 路由导航： 声明式: link "),m,e("ol",h,[e("li",null,[t('params // router 中 { path:"/xxx:id", element:'),a(n),t(' } navigate("/xxx/100") const [params] = useParmas() let id = param.id')])]),x,e("p",null,[t("使用children声明 使用"),a(i),t("配置渲染位置 路由默认渲染： { index:true, element:"),a(n),t(" }")]),g,e("p",null,[t('{ path:"*", element:'),a(l),t(" }")])])}const S=c(d,[["render",v]]);export{P as __pageData,S as default};
