import{_ as a,c as e,o as i,a1 as s}from"./chunks/framework.D13AgEzC.js";const b=JSON.parse('{"title":"缩小文件的搜索范围","description":"","frontmatter":{},"headers":[],"relativePath":"notes/webpack/webpack优化.md","filePath":"notes/webpack/webpack优化.md"}'),l={name:"notes/webpack/webpack优化.md"},n=s(`<h6 id="内容为webpack深入浅出这本书的笔记-非原创。" tabindex="-1">内容为Webpack深入浅出这本书的笔记，非原创。 <a class="header-anchor" href="#内容为webpack深入浅出这本书的笔记-非原创。" aria-label="Permalink to &quot;内容为Webpack深入浅出这本书的笔记，非原创。&quot;">​</a></h6><p>优化分为两个方面，优化开发体验、优化代码输出质量。</p><ul><li>开发体验：构建速度和开发使用体验。</li><li>输出质量：首屏加载速度，流畅度等等。</li></ul><h1 id="缩小文件的搜索范围" tabindex="-1">缩小文件的搜索范围 <a class="header-anchor" href="#缩小文件的搜索范围" aria-label="Permalink to &quot;缩小文件的搜索范围&quot;">​</a></h1><h2 id="_1-优化loader配置" tabindex="-1">1.优化Loader配置 <a class="header-anchor" href="#_1-优化loader配置" aria-label="Permalink to &quot;1.优化Loader配置&quot;">​</a></h2><ul><li>webpack启动后会从Entry出发，解析导入语句，再递归解析，找到文件，调用对应的loader解析。</li><li>使用loader时,可以通过test、include、exclude这三个配置项配置loader要应用规则的文件。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          module:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              rules:[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果文件中没有jsx则不要写成/\\.jsx?$/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   use:[],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   include:path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span></code></pre></div><h2 id="_2-配置resolve-modules" tabindex="-1">2.配置Resolve.modules <a class="header-anchor" href="#_2-配置resolve-modules" aria-label="Permalink to &quot;2.配置Resolve.modules&quot;">​</a></h2><pre><code>该项用于配置Webpack去哪里寻找第三方模块。
如果我们所有的依赖都在根目录下的node_module，则直接配置路径，避免多余的查找步骤。
\` 
   module.exports = {
       resolve:{
           modules:[path.resolve{__dirname,&#39;node_modules&#39;}]
       }
   }
\`
</code></pre><p>/** Resolve模块：配置Webpack从哪里寻找对应的文件。</p><p>*/</p><h2 id="_3-优化resolve-mainfileds配置" tabindex="-1">3.优化resolve.mainFileds配置 <a class="header-anchor" href="#_3-优化resolve-mainfileds配置" aria-label="Permalink to &quot;3.优化resolve.mainFileds配置&quot;">​</a></h2><ul><li>该项用于配置第三方模块使用的入口文件。有一些第三方模块会根据不同的环境提供几份代码。</li><li>以fetch为例，浏览器中通过原生或xhr实现，在node中通过http模块实现。它的package.json中有两个入口文件描述。</li><li>有关package.json内容的解析，见<a href="https://blog.csdn.net/qq_34703156/article/details/121401990" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_34703156/article/details/121401990</a></li><li>package.json的配置： <code> { browser:&quot;fetch-npm-browserify.js&quot;, main:&quot;retch-npm-node.js&quot; } </code> 如果我们明确要使用的入口文件，则做以下配置： <code> module:{ resolve:{ mainFields:[main] } } </code></li></ul><h2 id="_4-优化resolve-alias配置" tabindex="-1">4.优化resolve.alias配置 <a class="header-anchor" href="#_4-优化resolve-alias配置" aria-label="Permalink to &quot;4.优化resolve.alias配置&quot;">​</a></h2><ul><li>alias参数:用于映射，将配置的名称映射成路径地址。<br><code>resolve:{ alias:{ compomemts:&#39;./src/components&#39; } }</code></li><li>以React为例，React库又dist和lib两个文件夹，dist中是打包压缩后的代码，lib中是以commonJs规范的模块化代码。默认情况下会以reac.js为入口解析代码，解析的过程是一个很耗时的操作。</li><li>我们可以配置resolve.alais,直接使用React.main.js <code> module:{ resolve:{ alias:{ &#39;reac&#39;:&#39;path.resolve(__dirname,&#39;./node_module/react/dist/react.min.js&#39;)&#39; } } }</code></li></ul><p>/** 使用该配置会影响到tree-Sharking,如果引入的库我们只使用了其中很少一部分函数，不建议使用该方法，例如loadsh。 */</p><h2 id="_5-优化resolve-extensions配置" tabindex="-1">5.优化resolve.extensions配置 <a class="header-anchor" href="#_5-优化resolve-extensions配置" aria-label="Permalink to &quot;5.优化resolve.extensions配置&quot;">​</a></h2><ul><li><p>用于匹配未写明后缀名的路径。比如require(&#39;./src/main&#39;),未写明main.js，但仍能匹配到。</p></li><li><p>exytnsions默认为[&#39;.js&#39;,&#39;.json&#39;]</p></li><li><p>配置时遵守以下几点</p><p>1、后缀列表尽可能小</p><p>2、编写源码时尽可能带上后缀</p><p>3、频率出现最高的后缀放在最前面。</p></li></ul><h2 id="_6-优化module-noparse" tabindex="-1">6.优化module.noparse <a class="header-anchor" href="#_6-优化module-noparse" aria-label="Permalink to &quot;6.优化module.noparse&quot;">​</a></h2><ul><li>module.noparse可以让Webpack忽略对部分没有采取模块化的代码进行文件递归处理。</li><li>有一些庞大且未采用模块的库，如jquery,chartjs等，Webpack解析这些文件既耗时，又没有意义。</li></ul><p><code> module:{ noparse:[/\\react\\.mian\\.js$/] }</code></p><h1 id="dullplugin" tabindex="-1">DullPlugin <a class="header-anchor" href="#dullplugin" aria-label="Permalink to &quot;DullPlugin&quot;">​</a></h1><ul><li>Windows系统中以.dell为后缀的文件为动态链接库，动态连接库中包含为其他函数所调用的函数和数据。</li><li></li></ul><h1 id="happypack" tabindex="-1">HappyPack <a class="header-anchor" href="#happypack" aria-label="Permalink to &quot;HappyPack&quot;">​</a></h1><pre><code>webpack构建的流程是文件读写和计算密集型操作，文件特别多时Webpack构建慢的问题会特别严重，所以引入HappyPack,将任务分解给多个线程去执行。
</code></pre><h1 id="paralleuglifyplugin" tabindex="-1">ParalleUglifyPlugin <a class="header-anchor" href="#paralleuglifyplugin" aria-label="Permalink to &quot;ParalleUglifyPlugin&quot;">​</a></h1><h1 id="自动刷新" tabindex="-1">自动刷新 <a class="header-anchor" href="#自动刷新" aria-label="Permalink to &quot;自动刷新&quot;">​</a></h1><h1 id="hmr" tabindex="-1">HMR <a class="header-anchor" href="#hmr" aria-label="Permalink to &quot;HMR&quot;">​</a></h1><h1 id="区分环境" tabindex="-1">区分环境 <a class="header-anchor" href="#区分环境" aria-label="Permalink to &quot;区分环境&quot;">​</a></h1><h1 id="压缩代码" tabindex="-1">压缩代码 <a class="header-anchor" href="#压缩代码" aria-label="Permalink to &quot;压缩代码&quot;">​</a></h1><h1 id="cdn加速" tabindex="-1">cdn加速 <a class="header-anchor" href="#cdn加速" aria-label="Permalink to &quot;cdn加速&quot;">​</a></h1><h1 id="treeshaking" tabindex="-1">TreeShaking <a class="header-anchor" href="#treeshaking" aria-label="Permalink to &quot;TreeShaking&quot;">​</a></h1><h1 id="提取公共代码" tabindex="-1">提取公共代码 <a class="header-anchor" href="#提取公共代码" aria-label="Permalink to &quot;提取公共代码&quot;">​</a></h1><h1 id="分割代码以按需加载" tabindex="-1">分割代码以按需加载 <a class="header-anchor" href="#分割代码以按需加载" aria-label="Permalink to &quot;分割代码以按需加载&quot;">​</a></h1><h1 id="prepack" tabindex="-1">prepack <a class="header-anchor" href="#prepack" aria-label="Permalink to &quot;prepack&quot;">​</a></h1><h1 id="scoprhoising" tabindex="-1">ScoprHoising <a class="header-anchor" href="#scoprhoising" aria-label="Permalink to &quot;ScoprHoising&quot;">​</a></h1><h1 id="输出分析" tabindex="-1">输出分析 <a class="header-anchor" href="#输出分析" aria-label="Permalink to &quot;输出分析&quot;">​</a></h1><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1>`,38),r=[n];function t(o,h,d,p,c,k){return i(),e("div",null,r)}const m=a(l,[["render",t]]);export{b as __pageData,m as default};
