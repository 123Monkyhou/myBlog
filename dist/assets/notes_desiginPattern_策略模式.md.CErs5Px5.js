import{_ as t,c as e,o as a,a1 as o}from"./chunks/framework.D13AgEzC.js";const f=JSON.parse('{"title":"策略模式","description":"","frontmatter":{},"headers":[],"relativePath":"notes/desiginPattern/策略模式.md","filePath":"notes/desiginPattern/策略模式.md"}'),n={name:"notes/desiginPattern/策略模式.md"},r=o('<h1 id="策略模式" tabindex="-1">策略模式 <a class="header-anchor" href="#策略模式" aria-label="Permalink to &quot;策略模式&quot;">​</a></h1><p><strong>特点</strong>：</p><ol><li>策略类：算法封装成独立的函数/对象</li><li>环境类：根据不同参数调用对应的策略函数/对象执行</li></ol><h2 id="模式实现" tabindex="-1">模式实现 <a class="header-anchor" href="#模式实现" aria-label="Permalink to &quot;模式实现&quot;">​</a></h2><p>一个基于策略模式的程序至少由两部分组成，第一个部分是一组策略类 Strategies（可变），策略类封装类具体的算法，并负责具体的计算过程。第二个部分是环境类 Context（不变）， Context 接收客户的请求，随后把请求委托给某一个策略类。</p><p>例：一个开发团队，人员组成包括（开发组长，后端，前端，测试）。开发组长领取开发任务（不变），但具体的任务执行人员可根据类型划分（可变）。</p>',6),s=[r];function i(_,c,l,d,p,h){return a(),e("div",null,s)}const u=t(n,[["render",i]]);export{f as __pageData,u as default};
